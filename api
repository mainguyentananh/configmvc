package com.demo.api;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.demo.model.Student;
import com.demo.services.stdServices;

@RestController
@RequestMapping(value = "/api")
public class controllerAPI {

	@Autowired
	private stdServices sv;

	@GetMapping(value = "/students")
	public ResponseEntity<List<Student>> getAllStudents() {
		List<Student> ls = sv.getAll();
		return new ResponseEntity<List<Student>>(ls, HttpStatus.OK);
	}

	@GetMapping(value = "/student/{id}")
	public ResponseEntity<Student> getStudent(@PathVariable("id") Long id) {
		Student gsv = sv.getstd(id);
		if (gsv == null) {
			return new ResponseEntity<Student>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Student>(gsv, HttpStatus.OK);
	}

	@PostMapping(value = "/student")
	public ResponseEntity<Student> createStudent(@RequestBody Student nsv) {
		sv.save(nsv);
		return new ResponseEntity<Student>(HttpStatus.CREATED);
	}

	@PostMapping(value = "/students")
	public ResponseEntity<Student> createStudents(@RequestBody List<Student> nsv) {
		for (Student x : nsv) {
			sv.save(x);
		}
		return new ResponseEntity<Student>(HttpStatus.CREATED);
	}

	@PutMapping(value = "/student/{id}")
	public ResponseEntity<Student> updateStudent(@RequestBody Student nsv, @PathVariable("id") Long id) {
		Student osv = sv.getstd(id);
		if (osv == null) {
			return new ResponseEntity<Student>(HttpStatus.NOT_FOUND);
		}
		osv.setName(nsv.getName());
		osv.setMajor(nsv.getMajor());
		sv.update(osv);

		return new ResponseEntity<Student>(osv, HttpStatus.OK);
	}

	@DeleteMapping(value = "/student/{id}")
	public ResponseEntity<Void> deleteStudent(@PathVariable("id") Long id) {
		Student dsv = sv.getstd(id);
		if (dsv == null) {
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}

		sv.delete(id);
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}

	@DeleteMapping(value = "/students")
	public ResponseEntity<Void> deleteStudents() {
		sv.deleteAll();
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}

}
